r에서는 float지원 안함 실수형은 double쓴다.
assign("x",1:10) 이렇게 하면 x에 1부터 10까지 집어넣을 수 있다.
assign이 그냥 <- 이거랑 같은거임 할당하는거임
<<- 표시는 global assign
%는 모든 원소 비교, %%는 각 벡터의 첫번쨰 원소끼리 비교
나머지 연산은 %%이다
연산자 우선순위: (괄호및인덱스)-(제곱연산자)-(나머지연산자%%)-(곱,나눗셈)-(덧셈,뺄셈)-(비교연산자)-(논리연산자)-(할당연산자)
range(vector): 벡터의 최솟값 최댓값 반환
prod(x): x의 모든 원소의 곱
var(x): x의 원소를 기반으로 표본의 분산 ((n-1)로 나눈거)
order(x): 정렬 전 x의 위치값을 반환
complex(rea=1,imaginary=3): 1+3i인 복소수
complex(3,1): length가 3인 복소수 3+0i
complex(3,10,-2): length가 3인 복소수 10-2i
sqrt(-10):NaN(Not a Number),  sqrt(-10+0*i):error, sqrt(-10+0i): 투르 -10
Mod(복소수): 허수부분만 반환, Conj(복소수):켤레복소수
Arg(복소수): ???모르겠음
vec <- vector(): 비어있는 객체 생성
하나의 벡터에는 하나의 type만 가능
하나의 행렬에는 하나의 type만 가능
하나의 list에는 여러개 type이 가능
데이터프레임은 하나의 열은 같은 type
rownames(x)<-c("a","b"): 행렬x의 열 이름을 지어줄수있다. 
 [1] [2]
a  1   2
b  3   4
colnames(x)<-c("c","d")
dimnames를 이용해서 한번에 쓸수있다.
x <- matrix(1:12,4,3,dimnames=list(rownames(x),colnames(x)))
행렬의 합과 차는 차원이 동일한 경우에 연산
행렬의 곱은 %*% 이런 기호를 쓴다
(3x2)%*%(2x3) = 2x2행렬
solve(a): a의 역행렬
t(a): a의 전치행렬
diag(c(1,4)): 1 0
	      0 4
diag(행렬): 대각성분 반환 1 4
벡터의 내적은 sum(x*y)
행렬식함수 det(행렬)
list는 보통 인수 또는 반환값의 형태로 많이 쓰임
list[[1]][[2]] 이런거 확실히 알기
factor: 범주형 자료 분석에 쓰이는 자료에 적합한 형태로 명목형, 순서형 자료에 적합하다
	일반적으로 벡터와 형태는 유사하나 다른 점은 요인이 취할 수 있는 값을 
	level로 특성화 하여 명목형 순서형 자료를 잘 나타내고 처리할수있다.
array(자료,dim=차원정의(2,2,2,5))
as.matrix(x): x의길이x1인 행렬 
	x<-1:25 ; as.matrix(x)=(25x1)인 행렬
데이터프레임이 문자형 자료를 포함한 경우, 행렬변환시 행렬의 원소는 모두 문자형 자료로 변환(문자형 행렬로 변환)
데이터프레임이 수치형,논리형 자료만을 포함한 경우 행렬변환시 행렬의 원소는 모두 수치형 자료로 변환(수치형행렬)
stringAsFactor=F는 문자형을 factor로 안바꾸는거




















